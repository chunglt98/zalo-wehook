import { createClient } from '@vercel/kv';

export const config = {
  runtime: 'nodejs', // √©p ch·∫°y Node.js ch·ª© kh√¥ng ph·∫£i Edge
  api: {
    bodyParser: true, // ƒë·∫£m b·∫£o parse JSON cho webhook
  },
};


export default async function handler(req, res) {
  // ‚úÖ N·∫øu l√† request GET (Zalo ƒëang x√°c th·ª±c domain)
  if (req.method === 'GET') {
    const { verify_token } = req.query;

    // Log cho d·ªÖ debug
    console.log('üîç Zalo verification request:', verify_token);

    // Tr·∫£ l·∫°i ƒë√∫ng token cho Zalo
    if (verify_token) {
      return res.status(200).send(verify_token);
    } else {
      return res.status(400).send('Missing verify_token');
    }
  }

  // ... c√°c x·ª≠ l√Ω POST webhook kh√°c b√™n d∆∞·ªõi
}


export default async function handler(req, res) {
  // Ki·ªÉm tra method
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  // Debug env
  console.log('ENV DEBUG:', {
    KV_REST_API_URL: process.env.KV_REST_API_URL,
    KV_REST_API_TOKEN_EXISTS: !!process.env.KV_REST_API_TOKEN
  });

  // Kh·ªüi t·∫°o client KV th·ªß c√¥ng ƒë·ªÉ tr√°nh l·ªói import static
  const kv = createClient({
    url: process.env.KV_REST_API_URL,
    token: process.env.KV_REST_API_TOKEN
  });

  // L·∫•y endpoint name
  const endpoint = req.url.replace(/^\/(api\/)?webhook\//, '').split('?')[0];

  // D·ªØ li·ªáu log
  const logData = {
    timestamp: new Date().toISOString(),
    endpoint,
    body: req.body,
    headers: {
      'user-agent': req.headers['user-agent'],
      'content-type': req.headers['content-type']
    }
  };

  console.log('üì• Webhook received:', endpoint, logData);

  try {
    const key = `webhook:${endpoint}`;

    // L·∫•y logs c≈©
    const existingLogs = (await kv.get(key)) || [];
    existingLogs.unshift(logData);
    if (existingLogs.length > 100) existingLogs.length = 100;

    // Ghi l·∫°i log
    await kv.set(key, existingLogs);

    // Ghi danh s√°ch endpoints
    const endpointsKey = 'webhook:endpoints';
    const endpoints = (await kv.get(endpointsKey)) || [];
    if (!endpoints.includes(endpoint)) {
      endpoints.push(endpoint);
      await kv.set(endpointsKey, endpoints);
    }

    return res.status(200).json({
      status: 'ok',
      endpoint,
      received_at: logData.timestamp,
      note: 'Saved successfully'
    });
  } catch (error) {
    console.error('‚ùå Error saving webhook:', error);
    return res.status(500).json({
      status: 'ok',
      endpoint,
      received_at: logData.timestamp,
      note: 'Failed to save',
      error: String(error.message || error)
    });
  }
}
